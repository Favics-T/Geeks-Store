// Collection 

import React, { useContext, useState } from "react";
import { ProductContext } from "../Context/ProductContext";
import Product from "../Components/Product";
import { MdClear } from "react-icons/md";

const Collection = () => {
  const { products } = useContext(ProductContext);
  const [selectedCategory, setSelectedCategory] = useState("");
  const [searchTerm, setSearchTerm] = useState("");

  const filteredProducts = products.filter((item) => {
    const matchesCategory = selectedCategory ? item.category === selectedCategory : true;
    const matchesSearch = searchTerm
      ? item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.description.toLowerCase().includes(searchTerm.toLowerCase())
      : true;

    return matchesCategory && matchesSearch;
  });

  const handleSelectedCategory = (category) => {
    setSelectedCategory(category);
  };

  return (
    <div className="grid grid-cols-4 my-8 border border-black">
      <div className="mt-24 px-8">
        <div className="relative mb-4">
          <input
            type="text"
            placeholder="Search products"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="border w-full px-4 py-2 border-black rounded-2xl"
          />
          {searchTerm && (
            <button
              onClick={() => setSearchTerm("")}
              className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-500"
            >
             <MdClear />
            </button>
          )}
        </div>
        <h1
          className={`cols cursor-pointer ${selectedCategory === "men's clothing" ? "font-bold text-blue-500" : ""}`}
          onClick={() => handleSelectedCategory("men's clothing")}
        >
          Men
        </h1>
        <h1
          className={`cols cursor-pointer ${selectedCategory === "women's clothing" ? "font-bold text-blue-500" : ""}`}
          onClick={() => handleSelectedCategory("women's clothing")}
        >
          Women
        </h1>
        <h1
          className={`cols cursor-pointer ${selectedCategory === "electronics" ? "font-bold text-blue-500" : ""}`}
          onClick={() => handleSelectedCategory("electronics")}
        >
          Electronics
        </h1>
        <h1
          className={`cols cursor-pointer ${selectedCategory === "jewelery" ? "font-bold text-blue-500" : ""}`}
          onClick={() => handleSelectedCategory("jewelery")}
        >
          Jewelery
        </h1>
        <h1
          className={`cols cursor-pointer ${selectedCategory === "" ? "font-bold text-blue-500" : ""}`}
          onClick={() => handleSelectedCategory("")}
        >
          All
        </h1>
      </div>
      <div className="border-8 col-span-3">
        <div>
          <h1 className="mx-auto my-[20px] w-40 text-[20px] font-bold text-center">Our Collections</h1>
        </div>
        <div className="grid grid-cols-3 gap-4 my-8 mx-14">
          {filteredProducts.length > 0 ? (
            filteredProducts.map((item) => <Product product={item} key={item.id} />)
          ) : (
            <p className="col-span-3 text-center text-gray-500">
              No products found. Try a different search or category.
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

export default Collection;


// product

import { createContext } from "react"
import { useQuery } from '@tanstack/react-query'

export const ProductContext = createContext();

const LoadingSpinner = () => (
    <div className="h-[120vh] relative bg-black">
        <div className="bg-black w-[170px] h-0 rounded-full border-[15px] border-yellow-500 border-t-[5px] border-t-black border-b-[10px] border-b-black border-r-[15px] border-r-[#3c4bad] text-black animate-ani absolute top-[40%] left-[50%]">
            <h2 className="text-white font-logoFont0 text-[50px]">Geeks</h2>
        </div>
    </div>
);


const ProductProvider = ({ children })=>{

   const {data: products= [], isPending , error } = useQuery({
    queryKey : ['products'],
    queryFn: ()=> 
        fetch('https://fakestoreapi.com/products').then((res)=> res.json()),
   })

   if(isPending){
    return(
        <div>

            <LoadingSpinner />
           <div className="h-[120vh] relative bg-black ">
           <div class="bg-black w-[170px] h-0 rounded-full border-[15px] border-yellow-500
            border-t-[5px] border-t-black border-b-[10px] border-b-black border-r-[15px] border-r-[#3c4bad]
             text-black animate-ani absolute top-[40%] left-[50%] ">

                <h2 className="text-white font-logoFont0 text-[50px] ">Geeks</h2>
            </div>
           </div>

        </div>
    )
   }

   if(error){
    return(
        <h2>Error :{error.message}</h2>
    )
   }

   

    return(
        <div >
            <ProductContext.Provider value={{ products }}>
                {children} 
            </ProductContext.Provider>

        </div>
    )
}
export default ProductProvider



import React, { createContext, useState, useEffect, useContext } from "react";
// create context
export const CartContext = createContext();

const CartProvider = ({ children })=>{
  // cart state
  const [ cart, setCart ] = useState(()=>{
    // saving cart to local storage
    const savedCart = localStorage.getItem("cart");
    return savedCart ? JSON.parse(savedCart) : [];
  });
  const [task,setTask] = useState([])

  const [ cartCount, setCartCount ] = useState(0);
  // item amount state
  const [ itemQuantity, setItemQuantity ] = useState(1);
  // total price state
  const [ total, setTotal ] = useState(0);
  // cart count state
 const[popMessage, setPopMessage] = useState('')

 const removeFromCarts = (id)=>{
  setCart((prevCart) => {
     prevCart.filter(item=> 
      item.id === id ?
      (item.id == !id) :item)}
)
}

 useEffect(() => {
  const totalItems = cart.reduce((acc, item) => 
    acc + item.quantity, 0);
  setCartCount(totalItems);
}, [cart]);

 const itemIncrease = (itemId) => {
  setCart((prevItems) =>
    prevItems.map((item) =>
      item.id === itemId
        ? { ...item, quantity: item.quantity + 1 } // Increase the quantity by 1
        : item
    )
  );
};


const itemDecrease = (itemId) => {
  setCart((prevItems) =>
    prevItems.map((item) =>
      item.id === itemId
        ? { ...item, quantity: Math.max(item.quantity - 1, 1) } // Prevent going below 1
        : item
    )
  );
};


 // Add to cart function
 const addToCart = (newItem) => {
  setCart((prevItems) => {
    // Check if item exists
    const itemExist = prevItems.find((item) => 
      item.id === newItem.id);

    // If item exists, update quantity
    if (itemExist) {
      return prevItems.map((item) =>
        item.id === newItem.id
          ? { ...item, quantity: item.quantity + 1 }
          : item
      );
    } else {
      // Add new item to cart
      return [...prevItems, { ...newItem, quantity: 1 }];
    } });
setPopMessage('Added to cart');
setTimeout(() => setPopMessage('')
  , 3000);
};

  useEffect(() => {
    const calculatedTotal = cart.reduce(
      (acc, item) => acc + item.price * item.quantity,
      0
    );
    setTotal(calculatedTotal);
    // Save cart to localStorage
    localStorage.setItem("cart", JSON.stringify(cart));
  }, [cart]);


 // Remove from cart function
  const removeFromCart = (id, removeAll = false) => {
   
    setCart((prevItems) => {
      if (removeAll) {
        // Remove the entire item
        return prevItems.filter((item) => item.id !== id);
      } else {
        // Decrease the quantity by 1 or remove the item if quantity is 1
        return prevItems
          .map((item) =>
            item.id === id ? { ...item, quantity: Math.max( item.quantity - 1,0) } : item
          )
          .filter((item) => item.quantity > 0);
      }
    });
  };

 

  const clearCart = () => {
    setCart([]);
  };

  useEffect(() => {
    const calculatedTotal = cart.reduce(
      (acc, item) => acc + item.price * item.quantity,
      0
    );
    setTotal(calculatedTotal);

    const totalItems = cart.reduce((acc, item) => acc + item.quantity, 0);
    setCartCount(totalItems);

    // Save cart to localStorage
    localStorage.setItem("cart", JSON.stringify(cart));
  }, [cart]);
  
  


  return (
    <CartContext.Provider value={{
      popMessage,
      setPopMessage,
      cart,
      addToCart,
      removeFromCart,
      removeFromCarts,
      clearCart,
      total,
      cartCount,
      itemQuantity,
      setItemQuantity,
      itemDecrease,
      itemIncrease
       }}>
      { children }
    </CartContext.Provider>
  )
};

export default CartProvider;

import { CartContext } from '../Context/CartContext';
import React, {useContext} from 'react'
// import icons
import { IoAddOutline, IoRemoveOutline, IoCloseOutline } from 'react-icons/io5';
import empty from '../assets/emptyCart.png'
import { Link } from 'react-router-dom';

 const Cart = () => {
  const {itemIncrease,itemDecrease, cart,removeFromCarts, clearCart, total, cartCount,popMessage } =    useContext(CartContext);
   
  return (
   <div className=''>

<h2 className='headers ml-[45%]  mt-4'>Cart({cartCount})</h2>

{/* Cart Body Starts Here */}
<div className=' h-auto mb-20 grid grid-cols-2'>
    {
      cart.length > 0 ? (
        <div className='lg:grid lg:grid-cols-2 grid grid-cols-1 md:grid md:grid-cols-2'>
          
       <div>
         <div className='flex bg-white w-[1100px]  top-20'>
                    <div  className=' h-auto py-8 px-8   flex'>                
          <div className='w- border-2 border-black '>
            <div className='grid grid-cols-3 px-8 items-center text-center py-2'>
            <h1 className=' '>Product Image</h1>
            <h1>Product Details</h1>
            <h1 className='ml-40'>Product Quantity </h1>
            </div>
              {
                cart.map((item)=>(

        <div key={item.id}
                  className='w-full border border-y-black p-4 flex items-center gap-6'>
 <div className='w-full flex items-center justify-center gap-6'>

<div className='w-2/5'><img className='w-full h-44 object-contain'
                          src={item.image} alt="ProductImg" /> 
                        
</div>

<div className='w-4/5'>
<h2 className='font-semibold w-1/2 text-lg'> {item.title} </h2>
<p className='pr-10 w-1/2  text-sm'> {item.description.substring(0,130)} </p>
<p className='text-base'> Unit Price{" "}:
<span className='font-semibold'>${item.price}</span>

</p>

<div className='flex '>
<button  onClick={()=> itemIncrease(item.id)}
className='buttons'>+</button>
<button onClick={()=> removeFromCarts(item.id)}
className='buttons'>Erase</button>
<button  onClick={()=> itemDecrease(item.id)} 
className='buttons'>-</button>
</div>

</div>
     </div>
                    <div className='border  '>
<p className='p-20 text-[40px] '>{item.quantity}</p>
</div>  </div>                                  
                )) }


          </div>
                  
       
</div>
 
</div>

</div>  

<div className=' border-4 border-[#000b53] mt-8 h-60  w-56 p-10 relative left-[770px] '>
                  <h1 className='text-center m-4 underline underline-offset-4 font-titleFont'>Order Summary</h1>

<div className='text-black mx-10 '>
  <h1 className='w-36'>Shipping Fee: 0$</h1>
  <h1>Total:${total.toFixed(2)} </h1>

</div>


               </div>
               <button className=' text-white ml-8 rounded-2xl bg-red-700 w-[100px] h-[60px] '
                           onClick={clearCart}
                           >Clear cart </button>
        </div>

):
             
(
<div className='flex flex-col items-center justify-center w-screen h-screen'>
<img src={empty} alt="Empty Cart"
className='w-1/2' />
<Link to='/collection'> 
<h2 className='underline underline-offset-4 mt-4'>Continue Shopping</h2>
</Link>
</div>
)
} 


</div>

{/* Cart Body Ends Here */}


</div>
)
}

export default Cart




import { FaStar } from "react-icons/fa";
import React, { useContext } from "react";
import { CartContext } from "../Context/CartContext";

const Product = ({ product }) => {
  const { addToCart } = useContext(CartContext);
  const { id, title, category, image, price, description } = product;

  return (
    <div
      key={id}
      className="bg-white h-auto border-[1px] border-gray-200 
                 py-6 hover:shadow-lg hover:scale-105 transition-transform duration-300 
                 flex flex-col gap-4 relative"
    >
      {/* Image Section */}
      <div className="w-full h-auto flex items-center justify-center relative group">
        <img
          className="w-full max-w-[200px] h-auto object-contain"
          src={image}
          alt={`Image of ${title}`}
        />
      </div>

      {/* Product Details */}
      <div className="px-4 z-10 bg-white">
        <div className="flex items-center justify-between">
          <h2 className="font-titleFont tracking-wide mt-3 text-lg text-blue-950 truncate">
            {title}
          </h2>
          <p>${new Intl.NumberFormat().format(price)}</p>
        </div>

        <p className="text-sm mt-5 line-clamp-3">{description}</p>

        <button
          onClick={() => addToCart(product)}
          className="w-28 mt-2 cursor-pointer font-titleFont p-2 rounded-2xl font-medium 
                     bg-[#000b53] text-white hover:bg-blue-700 active:bg-blue-900 transition-all duration-200"
        >
          Add to Cart
        </button>
      </div>
    </div>
  );
};

export default Product;

